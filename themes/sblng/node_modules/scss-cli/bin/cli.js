#!/usr/bin/env node
var forEach = require('async-foreach').forEach
var mkdirp = require('mkdirp')
var color = require('cli-color')
var sass = require('node-sass')
var glob = require('glob')
var path = require('path')
var fs = require('fs')
var argv = require('yargs')
  .usage('Compile Sass files into CSS. \nUsage: $0 [files] [options]')
  .example('$0 *.scss -o css/', 'compile all files in current directory to the css directory')
  .demand(1)
  .alias('o', 'output')
  .describe('o', 'Output directory')
  .alias('i', 'indented-syntax')
  .describe('i', 'Treat data from stdin as sass code (versus scss)')
  .count('d')
  .alias('d', 'debug')
  .describe('d', 'Turn on verbose logging')
  .alias('g', 'glob')
  .describe('g', 'Use node globs instead of bash globs')
  .describe('output-style', 'CSS output style (nested|expanded|compact|compressed)')
  .describe('source-comments', 'Include debug info in output')
  .describe('source-map', 'Emit source map')
  .array('include-path')
  .describe('include-path', 'Path to look for imported files')
  .describe('image-path', 'Path to prepend when using the `image-url()` helper')
  .describe('precision', 'The amount of precision allowed in decimal numbers')
  .describe('help', 'Print usage info')
  .help('h')
  .alias('h', 'help')
  .version(sass.info())
  .alias('v', 'version')
  .describe('version', 'Print print node-sass and libsass versions')
  .argv

function debug (message) { if (argv['debug']) console.log(message) }

function writeFile (p, contents, cb) {
  mkdirp(path.dirname(p), function (err) {
    if (err) return cb(err)
    fs.writeFile(p, contents, cb)
  })
}

function parseFiles (arr) {
  var t0 = Date.now()
  var errors = 0
  var count = 0

  forEach(arr, function (el, i) {
    var done = this.async()
    var item = arr[i]
    var src = path.join(process.cwd(), item)
    var base = path.basename(item)
    var outDir = argv.o ? path.join(process.cwd(), argv.o) : path.dirname(src)
    var dest = path.join(outDir, base.replace('.scss', '.css'))

    if (base[0] === '_' || base.indexOf('.scss') < 0) {
      done()
    } else {
      sass.render({
        file: item,
        outFile: dest,
        includePaths: argv['include-path'] ? argv['include-path'] : [],
        imagePath: argv['image-path'] ? argv['image-path'] : '',
        indentedSyntax: argv['indented-syntax'] ? true : false,
        outputStyle: argv['output-style'] ? argv['output-style'] : 'nested',
        precision: argv['precision'] ? argv['precision'] : 5,
        sourceComments: argv['source-comments'] ? true : false,
        sourceMap: argv['source-map'] ? true : false,
        success: function (res) {
          writeFile(dest, res.css, function (err) {
            if (err) {
              console.error(err)
              errors++
            } else {
              debug(color.green('✓ ') + dest)
              count++
            }
            if (!argv['source-map']) done()
          })

          if (argv['source-map']) {
            writeFile(dest + '.map', res.map, function (err) {
              if (err) {
                console.error(err)
                errors++
              }
              else debug(color.green('✓ ') + dest + '.map')
              done()
            })
          }
        },
        error: function (err) {
          console.error(err)
          errors++
        }
      })
    }
  }, function (successful, arr) {
    var t1 = Date.now()
    var summary = 'Built ' + count + ' css files in ' + (t1 - t0) + 'ms with ' + errors + ' errors'
    console.log(color.green(summary))
  })
}

if (argv['glob']) {
  var files = glob.sync(argv._[0], {})
  parseFiles(files)
} else {
  parseFiles(argv._)
}
